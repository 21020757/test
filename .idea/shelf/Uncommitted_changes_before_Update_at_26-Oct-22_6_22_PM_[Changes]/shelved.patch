Index: src/GameObject/Tiles/TileManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package GameObject.Tiles;\r\n\r\nimport GameObject.Gameobject;\r\nimport GameObject.Item.BrickFlameItem;\r\nimport GameObject.Item.BrickPortalItem;\r\nimport GameObject.Item.BrickSpeedItem;\r\nimport GameObject.Item.FlameItem;\r\nimport GameObject.mapObject.Brick;\r\nimport GameObject.mapObject.Grass;\r\nimport GameObject.mapObject.Wall;\r\nimport main.GamePanel;\r\n\r\nimport javax.imageio.ImageIO;\r\nimport javax.management.DescriptorRead;\r\nimport java.awt.*;\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\n\r\npublic class TileManager {\r\n    GamePanel gp;\r\n    public static Gameobject obj[][];\r\n\r\n    char map[][];\r\n\r\n    public TileManager(GamePanel gp) {\r\n        this.gp = gp;\r\n        obj = new Gameobject[gp.maxWorldRow][gp.maxWorldCol];\r\n        map = new char[gp.maxWorldRow][gp.maxWorldCol];\r\n        loadMap();\r\n        createObject();\r\n    }\r\n\r\n    public void loadMap() {\r\n        try {\r\n            InputStream is = getClass().getResourceAsStream(\"/GameObject/Tiles/map.txt\");\r\n            BufferedReader br = new BufferedReader(new InputStreamReader(is));\r\n            for (int i = 0; i < gp.maxWorldRow; i++) {\r\n                String line = br.readLine();\r\n                for (int j = 0; j < gp.maxWorldCol; j++) {\r\n                    map[i][j] = line.charAt(j);\r\n                }\r\n            }\r\n            br.close();\r\n        } catch (Exception e) {\r\n\r\n        }\r\n    }\r\n\r\n    public void createObject() {\r\n        for (int i = 0; i < gp.maxWorldRow; i++) {\r\n            for (int j = 0; j < gp.maxWorldCol; j++) {\r\n                char s = map[i][j];\r\n                if (s == '#') {\r\n                    obj[i][j] = new Wall(j * 48, i * 48);\r\n                } else if (s == 'f') {\r\n                    obj[i][j] = new BrickFlameItem(j * 48, i * 48);\r\n                } else if (s == 's') {\r\n                    obj[i][j] = new BrickSpeedItem(j * 48, i * 48);\r\n                } else if (s == '*') {\r\n                    obj[i][j] = new Brick(j * 48, i * 48);\r\n                } else if (s == 'x') {\r\n                    obj[i][j] = new BrickPortalItem(j * 48, i*48);\r\n                } else {\r\n                    obj[i][j] = new Grass(j*48,i*48);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public void draw(Graphics2D g2) {\r\n        for (int i = 0; i < gp.maxWorldRow; i++) {\r\n            for (int j = 0; j < gp.maxWorldCol; j++) {\r\n                char s = map[i][j];\r\n                if (gp.bomberman.x >= gp.screenWidth / 2 && gp.bomberman.x <= gp.worldWidth - gp.screenWidth / 2) {\r\n                    int ScreenX = j * gp.tileSize - gp.bomberman.x + gp.screenWidth / 2;\r\n                    if (s == ' ') {\r\n                        g2.drawImage(obj[i][j].image, ScreenX, i * gp.tileSize, gp.tileSize, gp.tileSize, null);\r\n                    } else if (s == '#') {\r\n                        g2.drawImage(obj[i][j].image, ScreenX, i * gp.tileSize, gp.tileSize, gp.tileSize, null);\r\n                    } else {\r\n                        g2.drawImage(obj[i][j].image, ScreenX, i * gp.tileSize, gp.tileSize, gp.tileSize, null);\r\n                    }\r\n                } else if (gp.bomberman.x < gp.screenWidth / 2) {\r\n                    if (s == ' ') {\r\n                        g2.drawImage(obj[i][j].image, j * gp.tileSize, i * gp.tileSize, gp.tileSize, gp.tileSize, null);\r\n\r\n                    } else if (s == '#') {\r\n                        g2.drawImage(obj[i][j].image, j * gp.tileSize, i * gp.tileSize, gp.tileSize, gp.tileSize, null);\r\n                    } else {\r\n                        g2.drawImage(obj[i][j].image, j * gp.tileSize, i * gp.tileSize, gp.tileSize, gp.tileSize, null);\r\n                    }\r\n                } else {\r\n                    int ScreenX = j * gp.tileSize - gp.worldWidth + gp.screenWidth;\r\n                    if (s == ' ') {\r\n                        g2.drawImage(obj[i][j].image, ScreenX, i * gp.tileSize, gp.tileSize, gp.tileSize, null);\r\n                    } else if (s == '#') {\r\n                        g2.drawImage(obj[i][j].image, ScreenX, i * gp.tileSize, gp.tileSize, gp.tileSize, null);\r\n                    } else {\r\n                        g2.drawImage(obj[i][j].image, ScreenX, i * gp.tileSize, gp.tileSize, gp.tileSize, null);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/GameObject/Tiles/TileManager.java b/src/GameObject/Tiles/TileManager.java
--- a/src/GameObject/Tiles/TileManager.java	(revision f0c8fb4a36e4cde7486624a3e91f0d38aa551d7d)
+++ b/src/GameObject/Tiles/TileManager.java	(date 1666753196280)
@@ -61,9 +61,9 @@
                 } else if (s == '*') {
                     obj[i][j] = new Brick(j * 48, i * 48);
                 } else if (s == 'x') {
-                    obj[i][j] = new BrickPortalItem(j * 48, i*48);
+                    obj[i][j] = new BrickPortalItem(j * 48, i * 48);
                 } else {
-                    obj[i][j] = new Grass(j*48,i*48);
+                    obj[i][j] = new Grass(j * 48, i * 48);
                 }
             }
         }
@@ -79,6 +79,11 @@
                         g2.drawImage(obj[i][j].image, ScreenX, i * gp.tileSize, gp.tileSize, gp.tileSize, null);
                     } else if (s == '#') {
                         g2.drawImage(obj[i][j].image, ScreenX, i * gp.tileSize, gp.tileSize, gp.tileSize, null);
+                    } else if (s == '1') {
+                        for (int k = 0; k < gp.enemy.length; k++) {
+                            gp.enemy[k].x = j * gp.tileSize;
+                            gp.enemy[k].y = i * gp.tileSize;
+                        }
                     } else {
                         g2.drawImage(obj[i][j].image, ScreenX, i * gp.tileSize, gp.tileSize, gp.tileSize, null);
                     }
@@ -88,6 +93,11 @@
 
                     } else if (s == '#') {
                         g2.drawImage(obj[i][j].image, j * gp.tileSize, i * gp.tileSize, gp.tileSize, gp.tileSize, null);
+                    } else if (s == '1') {
+                        for (int k = 0; k < gp.enemy.length; k++) {
+                            gp.enemy[k].x = j * gp.tileSize;
+                            gp.enemy[k].y = i * gp.tileSize;
+                        }
                     } else {
                         g2.drawImage(obj[i][j].image, j * gp.tileSize, i * gp.tileSize, gp.tileSize, gp.tileSize, null);
                     }
@@ -97,6 +107,11 @@
                         g2.drawImage(obj[i][j].image, ScreenX, i * gp.tileSize, gp.tileSize, gp.tileSize, null);
                     } else if (s == '#') {
                         g2.drawImage(obj[i][j].image, ScreenX, i * gp.tileSize, gp.tileSize, gp.tileSize, null);
+                    } else if (s == '1') {
+                        for (int k = 0; k < gp.enemy.length; k++) {
+                            gp.enemy[k].x = j * gp.tileSize;
+                            gp.enemy[k].y = i * gp.tileSize;
+                        }
                     } else {
                         g2.drawImage(obj[i][j].image, ScreenX, i * gp.tileSize, gp.tileSize, gp.tileSize, null);
                     }
Index: src/GameObject/entity/Oneal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/GameObject/entity/Oneal.java b/src/GameObject/entity/Oneal.java
new file mode 100644
--- /dev/null	(date 1666758123688)
+++ b/src/GameObject/entity/Oneal.java	(date 1666758123688)
@@ -0,0 +1,4 @@
+package GameObject.entity;
+
+public class Oneal {
+}
Index: src/main/GamePanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main;\r\n\r\nimport GameObject.Tiles.TileManager;\r\nimport GameObject.entity.Bomberman;\r\nimport GameObject.entity.Enemies;\r\nimport GameObject.entity.Entity;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\n\r\n\r\npublic class GamePanel extends JPanel implements Runnable {\r\n    // SCREEN SETTINGS\r\n    public final int orignalTileSize = 16; //16x16 tile\r\n    public final int scale = 3;\r\n    public final int tileSize = orignalTileSize * scale; // Tile size --- 48x48\r\n    final int maxScreenCol = 16;\r\n    final int maxScreenRow = 13;\r\n    public final int screenWidth = tileSize * maxScreenCol;\r\n    public final int screenHeight = tileSize * maxScreenRow;\r\n    //Create object\r\n    Thread gameThread;\r\n    KeyHandler keyH = new KeyHandler(this);\r\n\r\n    public AssetSetter aSetter = new AssetSetter(this);\r\n    public Bomberman bomberman = new Bomberman(this, keyH);\r\n    public Entity[] enemy = new Entity[3];\r\n\r\n    Sound sound = new Sound();\r\n\r\n    //World Settings\r\n    public final int maxWorldCol = 31;\r\n    public final int maxWorldRow = 13;\r\n    public final int worldWidth = tileSize * maxWorldCol;\r\n    public final int worldHeight = tileSize * maxWorldRow;\r\n    //FPS\r\n    int FPS = 60;\r\n    TileManager tile = new TileManager(this);\r\n\r\n    //MENU\r\n    public int gameState;\r\n    public final int titleState = 0;\r\n    public final int playState = 1;\r\n    public final int loadLevel = 2;\r\n    public final int pauseState = 3;\r\n    public int loadGameInterval = -1;\r\n    public int commandNum = 0;\r\n    Menu menu = new Menu(this);\r\n\r\n\r\n    public GamePanel() {\r\n        this.setPreferredSize(new Dimension(screenWidth, screenHeight));\r\n        this.setBackground(Color.BLACK);\r\n        this.setDoubleBuffered(true);\r\n        this.addKeyListener(keyH);\r\n        this.setFocusable(true);\r\n    }\r\n\r\n\r\n    public void setUpGame() {\r\n        gameState = titleState;\r\n        playMusic(0);\r\n        for (int i = 0; i < enemy.length; i++) {\r\n            enemy[i] = new Enemies(this);\r\n            enemy[i].x = (i + 1) * 48;\r\n            enemy[i].y = (i + 1) * 48;\r\n        }\r\n    }\r\n\r\n    public void startGameThread() {\r\n        gameThread = new Thread(this);\r\n        gameThread.start();\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        double drawInterval = 1000000000 / FPS;\r\n        double nextDrawTime = System.nanoTime() + drawInterval;\r\n        while (gameThread != null) {\r\n\r\n            update();\r\n\r\n            repaint();\r\n\r\n            try {\r\n                double remainingTime = nextDrawTime - System.nanoTime();\r\n                remainingTime /= 1000000;\r\n                if (remainingTime < 0) {\r\n                    remainingTime = 0;\r\n                }\r\n                Thread.sleep((long) remainingTime);\r\n                nextDrawTime += drawInterval;\r\n            } catch (InterruptedException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    public void update() {\r\n        bomberman.update();\r\n        for (int i = 0; i < enemy.length; i++) {\r\n            enemy[i].update();\r\n        }\r\n    }\r\n\r\n    public void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        Graphics2D g2 = (Graphics2D) g;\r\n        menu.draw(g2);\r\n        if (gameState == playState) {\r\n            //OTHERS\r\n            tile.draw(g2);\r\n            bomberman.draw(g2);\r\n            for (int i = 0; i < enemy.length; i++) {\r\n                enemy[i].draw(g2);\r\n            }\r\n        }\r\n        g2.dispose();\r\n    }\r\n\r\n\r\n    public int getTextCenterX(String text, Graphics2D g2) {\r\n        int length = (int) g2.getFontMetrics().getStringBounds(text, g2).getWidth();\r\n        return screenWidth / 2 - length / 2;\r\n    }\r\n\r\n    /*/\r\n    _______________________________________\r\n    |                                     |\r\n    |            MUSIC SETTINGS           |\r\n    |_____________________________________|\r\n     */\r\n    public void playMusic(int i) {\r\n        sound.setFile(i);\r\n        sound.play();\r\n        sound.loop();\r\n    }\r\n\r\n    public void stopMusic() {\r\n        sound.stop();\r\n    }\r\n\r\n    public void playSE(int i) {\r\n        sound.setFile(i);\r\n        sound.play();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/GamePanel.java b/src/main/GamePanel.java
--- a/src/main/GamePanel.java	(revision f0c8fb4a36e4cde7486624a3e91f0d38aa551d7d)
+++ b/src/main/GamePanel.java	(date 1666753413441)
@@ -60,11 +60,6 @@
     public void setUpGame() {
         gameState = titleState;
         playMusic(0);
-        for (int i = 0; i < enemy.length; i++) {
-            enemy[i] = new Enemies(this);
-            enemy[i].x = (i + 1) * 48;
-            enemy[i].y = (i + 1) * 48;
-        }
     }
 
     public void startGameThread() {
@@ -98,8 +93,8 @@
 
     public void update() {
         bomberman.update();
-        for (int i = 0; i < enemy.length; i++) {
-            enemy[i].update();
+        for (Entity entity : enemy) {
+            entity.update();
         }
     }
 
@@ -111,8 +106,8 @@
             //OTHERS
             tile.draw(g2);
             bomberman.draw(g2);
-            for (int i = 0; i < enemy.length; i++) {
-                enemy[i].draw(g2);
+            for (Entity entity : enemy) {
+                entity.draw(g2);
             }
         }
         g2.dispose();
