Index: src/GameObject/entity/Enemies.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package GameObject.entity;\r\n\r\nimport main.GamePanel;\r\n\r\nimport javax.imageio.ImageIO;\r\nimport java.awt.*;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.IOException;\r\nimport java.util.Objects;\r\nimport java.util.Random;\r\n\r\nimport static GameObject.entity.Bomberman.intervalImageChange;\r\n\r\npublic class Enemies extends Entity {\r\n    public int actionLockCounter = 0;\r\n    BufferedImage[] balloonLeft = new BufferedImage[3];\r\n    BufferedImage[] balloonRight = new BufferedImage[3];\r\n\r\n    public Enemies(GamePanel gp) {\r\n        super(gp);\r\n        direction = \"down\";\r\n        preDirection = \"\";\r\n        speed = 2;\r\n        width = 48;\r\n        height = 48;\r\n        getImage();\r\n    }\r\n    public void setEnemies(int x, int y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    public void getImage() {\r\n        try {\r\n            //Balloon\r\n            balloonLeft[0] = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream(\"/GameObject/sprites/enemy/balloom_left1.png\")));\r\n            balloonLeft[1] = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream(\"/GameObject/sprites/enemy/balloom_left2.png\")));\r\n            balloonLeft[2] = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream(\"/GameObject/sprites/enemy/balloom_left3.png\")));\r\n\r\n            balloonRight[0] = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream(\"/GameObject/sprites/enemy/balloom_right1.png\")));\r\n            balloonRight[1] = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream(\"/GameObject/sprites/enemy/balloom_right2.png\")));\r\n            balloonRight[2] = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream(\"/GameObject/sprites/enemy/balloom_right3.png\")));\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void setAction() {\r\n        actionLockCounter++;\r\n        if (actionLockCounter == 120) {\r\n            Random random = new Random();\r\n            int i = random.nextInt(100) + 1;\r\n            if (i <= 25) {\r\n                direction = \"up\";\r\n                preDirection = \"up\";\r\n            }\r\n            if (i > 25 && i <= 50) {\r\n                direction = \"down\";\r\n                preDirection = \"down\";\r\n            }\r\n            if (i > 50 && i <= 75) {\r\n                direction = \"left\";\r\n            }\r\n            if (i > 75) {\r\n                direction = \"right\";\r\n            }\r\n            actionLockCounter = 0;\r\n\r\n            actionLockCounter = 0;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void update() {\r\n        setAction();\r\n        switch (direction) {\r\n            case \"up\" -> {\r\n                if (!collisionUp()) {\r\n                    y -= speed;\r\n                }\r\n            }\r\n            case \"down\" -> {\r\n                if (!collisionDown()) {\r\n                    y += speed;\r\n                }\r\n            }\r\n            case \"left\" -> {\r\n                if (!collisionLeft()) {\r\n                    x -= speed;\r\n                }\r\n            }\r\n            case \"right\" -> {\r\n                if (!collisionRight()) {\r\n                    x += speed;\r\n                }\r\n            }\r\n        }\r\n        spriteCounter++;\r\n        if (spriteCounter > 12) {\r\n            if (spriteNum == 1) {\r\n                spriteNum = 2;\r\n            } else if (spriteNum == 2) {\r\n                spriteNum = 1;\r\n            }\r\n            spriteCounter = 0;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void draw(Graphics2D g2) {\r\n        if (gp.bomberman.x <= gp.screenWidth / 2) {\r\n            if (direction.equals(\"left\")) {\r\n                g2.drawImage(balloonLeft[spriteNum], x, y, gp.tileSize, gp.tileSize, null);\r\n            } else if (direction.equals(\"right\")) {\r\n                g2.drawImage(balloonRight[spriteNum], x, y, gp.tileSize, gp.tileSize, null);\r\n            } else {\r\n                if (preDirection.equals(\"left\")) {\r\n                    g2.drawImage(balloonLeft[spriteNum], x, y, gp.tileSize, gp.tileSize, null);\r\n                } else {\r\n                    g2.drawImage(balloonRight[spriteNum], x, y, gp.tileSize, gp.tileSize, null);\r\n                }\r\n            }\r\n        } else if (gp.screenWidth / 2 <= gp.bomberman.x && gp.bomberman.x < gp.worldWidth - gp.screenWidth/2 && x >= gp.screenWidth / 2) {\r\n            int ScreenX = x + gp.screenWidth / 2 - gp.bomberman.x;\r\n            if (direction.equals(\"left\")) {\r\n                g2.drawImage(balloonLeft[spriteNum], ScreenX, y, gp.tileSize, gp.tileSize, null);\r\n            } else if (direction.equals(\"right\")) {\r\n                g2.drawImage(balloonRight[spriteNum], ScreenX, y, gp.tileSize, gp.tileSize, null);\r\n            } else {\r\n                if (preDirection.equals(\"left\")) {\r\n                    g2.drawImage(balloonLeft[spriteNum], ScreenX, y, gp.tileSize, gp.tileSize, null);\r\n                } else {\r\n                    g2.drawImage(balloonRight[spriteNum], ScreenX, y, gp.tileSize, gp.tileSize, null);\r\n                }\r\n            }\r\n        } else if (gp.screenWidth / 2 <= gp.bomberman.x && x < gp.screenWidth / 2) {\r\n            int ScreenX = gp.screenWidth / 2 + this.x - gp.bomberman.x;\r\n            if (direction.equals(\"left\")) {\r\n                g2.drawImage(balloonLeft[spriteNum], ScreenX, y, gp.tileSize, gp.tileSize, null);\r\n            } else if (direction.equals(\"right\")) {\r\n                g2.drawImage(balloonRight[spriteNum], ScreenX, y, gp.tileSize, gp.tileSize, null);\r\n            } else {\r\n                if (preDirection.equals(\"left\")) {\r\n                    g2.drawImage(balloonLeft[spriteNum], ScreenX, y, gp.tileSize, gp.tileSize, null);\r\n                } else {\r\n                    g2.drawImage(balloonRight[spriteNum], ScreenX, y, gp.tileSize, gp.tileSize, null);\r\n                }\r\n            }\r\n        } else if (gp.bomberman.x > gp.worldWidth - gp.screenWidth / 2) {\r\n            int ScreenX = x - gp.worldWidth + gp.screenWidth;\r\n            if (direction.equals(\"left\")) {\r\n                g2.drawImage(balloonLeft[spriteNum], ScreenX, y, gp.tileSize, gp.tileSize, null);\r\n            } else if (direction.equals(\"right\")) {\r\n                g2.drawImage(balloonRight[spriteNum], ScreenX, y, gp.tileSize, gp.tileSize, null);\r\n            } else {\r\n                if (preDirection.equals(\"left\")) {\r\n                    g2.drawImage(balloonLeft[spriteNum], ScreenX, y, gp.tileSize, gp.tileSize, null);\r\n                } else {\r\n                    g2.drawImage(balloonRight[spriteNum], ScreenX, y, gp.tileSize, gp.tileSize, null);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/GameObject/entity/Enemies.java b/src/GameObject/entity/Enemies.java
--- a/src/GameObject/entity/Enemies.java	(revision b80c6344eb4626b769c270beac5a5f94ba3574d8)
+++ b/src/GameObject/entity/Enemies.java	(date 1666750470040)
@@ -24,6 +24,7 @@
         width = 48;
         height = 48;
         getImage();
+        setEnemies(96, 96);
     }
     public void setEnemies(int x, int y) {
         this.x = x;
@@ -49,23 +50,21 @@
         actionLockCounter++;
         if (actionLockCounter == 120) {
             Random random = new Random();
-            int i = random.nextInt(100) + 1;
-            if (i <= 25) {
+            int i = random.nextInt(80) + 1;
+            if (i <= 20) {
                 direction = "up";
                 preDirection = "up";
             }
-            if (i > 25 && i <= 50) {
+            if (i > 20 && i <= 40) {
                 direction = "down";
                 preDirection = "down";
             }
-            if (i > 50 && i <= 75) {
+            if (i > 40 && i <= 60) {
                 direction = "left";
             }
-            if (i > 75) {
+            if (i > 60) {
                 direction = "right";
             }
-            actionLockCounter = 0;
-
             actionLockCounter = 0;
         }
     }
Index: src/main/GamePanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main;\r\n\r\nimport GameObject.Tiles.TileManager;\r\nimport GameObject.entity.Bomberman;\r\nimport GameObject.entity.Enemies;\r\nimport GameObject.entity.Entity;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\n\r\n\r\npublic class GamePanel extends JPanel implements Runnable {\r\n    // SCREEN SETTINGS\r\n    public final int orignalTileSize = 16; //16x16 tile\r\n    public final int scale = 3;\r\n    public final int tileSize = orignalTileSize * scale; // Tile size --- 48x48\r\n    final int maxScreenCol = 16;\r\n    final int maxScreenRow = 13;\r\n    public final int screenWidth = tileSize * maxScreenCol;\r\n    public final int screenHeight = tileSize * maxScreenRow;\r\n    //Create object\r\n    Thread gameThread;\r\n    KeyHandler keyH = new KeyHandler(this);\r\n\r\n    public AssetSetter aSetter = new AssetSetter(this);\r\n    public Bomberman bomberman = new Bomberman(this, keyH);\r\n    public Entity enemy = new Enemies(this);\r\n    Sound sound = new Sound();\r\n\r\n    //World Settings\r\n    public final int maxWorldCol = 31;\r\n    public final int maxWorldRow = 13;\r\n    public final int worldWidth = tileSize * maxWorldCol;\r\n    public final int worldHeight = tileSize * maxWorldRow;\r\n    //FPS\r\n    int FPS = 60;\r\n    TileManager tile = new TileManager(this);\r\n\r\n    //MENU\r\n    public int gameState;\r\n    public final int titleState = 0;\r\n    public final int playState = 1;\r\n    public final int loadLevel = 2;\r\n    public final int pauseState = 3;\r\n    public int loadGameInterval = -1;\r\n    public int commandNum = 0;\r\n    Menu menu = new Menu(this);\r\n\r\n\r\n    public GamePanel() {\r\n        this.setPreferredSize(new Dimension(screenWidth, screenHeight));\r\n        this.setBackground(Color.BLACK);\r\n        this.setDoubleBuffered(true);\r\n        this.addKeyListener(keyH);\r\n        this.setFocusable(true);\r\n    }\r\n\r\n\r\n    public void setUpGame() {\r\n        gameState = titleState;\r\n        playMusic(0);\r\n    }\r\n\r\n    public void startGameThread() {\r\n        gameThread = new Thread(this);\r\n        gameThread.start();\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        double drawInterval = 1000000000 / FPS;\r\n        double nextDrawTime = System.nanoTime() + drawInterval;\r\n        while (gameThread != null) {\r\n\r\n            update();\r\n\r\n            repaint();\r\n\r\n            try {\r\n                double remainingTime = nextDrawTime - System.nanoTime();\r\n                remainingTime /= 1000000;\r\n                if (remainingTime < 0) {\r\n                    remainingTime = 0;\r\n                }\r\n                Thread.sleep((long) remainingTime);\r\n                nextDrawTime += drawInterval;\r\n            } catch (InterruptedException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    public void update() {\r\n        bomberman.update();\r\n        if (enemy != null) {\r\n            enemy.update();\r\n        }\r\n    }\r\n\r\n    public void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        Graphics2D g2 = (Graphics2D) g;\r\n        menu.draw(g2);\r\n        if (gameState == playState) {\r\n            //OTHERS\r\n            tile.draw(g2);\r\n            bomberman.draw(g2);\r\n            if (enemy != null) {\r\n                enemy.draw(g2);\r\n            }\r\n        }\r\n        g2.dispose();\r\n    }\r\n\r\n\r\n    public int getTextCenterX(String text, Graphics2D g2) {\r\n        int length = (int) g2.getFontMetrics().getStringBounds(text, g2).getWidth();\r\n        return screenWidth / 2 - length / 2;\r\n    }\r\n\r\n    /*/\r\n    _______________________________________\r\n    |                                     |\r\n    |            MUSIC SETTINGS           |\r\n    |_____________________________________|\r\n     */\r\n    public void playMusic(int i) {\r\n        sound.setFile(i);\r\n        sound.play();\r\n        sound.loop();\r\n    }\r\n\r\n    public void stopMusic() {\r\n        sound.stop();\r\n    }\r\n\r\n    public void playSE(int i) {\r\n        sound.setFile(i);\r\n        sound.play();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/GamePanel.java b/src/main/GamePanel.java
--- a/src/main/GamePanel.java	(revision b80c6344eb4626b769c270beac5a5f94ba3574d8)
+++ b/src/main/GamePanel.java	(date 1666750584396)
@@ -24,7 +24,7 @@
 
     public AssetSetter aSetter = new AssetSetter(this);
     public Bomberman bomberman = new Bomberman(this, keyH);
-    public Entity enemy = new Enemies(this);
+    public Entity[] enemy = new Entity[3];
     Sound sound = new Sound();
 
     //World Settings
@@ -92,9 +92,7 @@
 
     public void update() {
         bomberman.update();
-        if (enemy != null) {
-            enemy.update();
-        }
+        enemy.update();
     }
 
     public void paintComponent(Graphics g) {
@@ -105,9 +103,7 @@
             //OTHERS
             tile.draw(g2);
             bomberman.draw(g2);
-            if (enemy != null) {
-                enemy.draw(g2);
-            }
+            enemy.draw(g2);
         }
         g2.dispose();
     }
Index: src/GameObject/object/Bomb.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package GameObject.object;\r\n\r\nimport GameObject.Gameobject;\r\nimport GameObject.Item.BrickFlameItem;\r\nimport GameObject.Item.BrickSpeedItem;\r\nimport GameObject.Item.FlameItem;\r\nimport GameObject.Item.SpeedItem;\r\nimport GameObject.Tiles.TileManager;\r\nimport GameObject.mapObject.Brick;\r\nimport GameObject.mapObject.Grass;\r\nimport GameObject.mapObject.Wall;\r\nimport main.GamePanel;\r\n\r\nimport javax.imageio.IIOException;\r\nimport javax.imageio.ImageIO;\r\nimport java.awt.*;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.IOException;\r\nimport java.util.Objects;\r\n\r\npublic class Bomb extends Gameobject {\r\n    public int FlameUp, FlameDown,FlameLeft, FlameRight;\r\n    public int UpFlame, DownFlame, LeftFlame, RightFlame;\r\n    public boolean exploded;\r\n    public int countToExplode = 0, intervalToExplode = 5;\r\n    public BufferedImage[] bombing = new BufferedImage[3];\r\n    public BufferedImage[] fontExplosion = new BufferedImage[3];\r\n    public BufferedImage[] upExplosion = new BufferedImage[3];\r\n    public BufferedImage[] downExplosion = new BufferedImage[3];\r\n    public BufferedImage[] leftExplosion = new BufferedImage[3];\r\n    public BufferedImage[] rightExplosion = new BufferedImage[3];\r\n    public BufferedImage[] horizontalExplosion = new BufferedImage[3];\r\n    public BufferedImage[] verticalExplosion = new BufferedImage[3];\r\n    public int frameBomb = 0, intervalBomb = 7, indexAniBomb = 0;\r\n    public int frameExplosion = 0, intervalExplosion = 4, indexAniExplosion = 0;\r\n\r\n    public Bomb(int x, int y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        FlameUp = 1;\r\n        FlameDown = 1;\r\n        FlameLeft = 1;\r\n        FlameRight = 1;\r\n        UpFlame = 1;\r\n        DownFlame = 1;\r\n        RightFlame = 1;\r\n        LeftFlame = 1;\r\n        update();\r\n        getBombImage();\r\n        exploded = false;\r\n    }\r\n\r\n    public void update() {\r\n        x = (x / 48) * 48;\r\n        y = (y / 48) * 48;\r\n    }\r\n\r\n    @Override\r\n    public Rectangle getBound() {\r\n        return new Rectangle(x, y, width, height);\r\n    }\r\n\r\n    public void getBombImage() {\r\n        try {\r\n            //Bomb\r\n            bombing[0] = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream(\"/GameObject/sprites/object/bomb.png\")));\r\n            bombing[1] = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream(\"/GameObject/sprites/object/bomb_1.png\")));\r\n            bombing[2] = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream(\"/GameObject/sprites/object/bomb_2.png\")));\r\n\r\n            fontExplosion[0] = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream(\"/GameObject/sprites/object/bomb_exploded.png\")));\r\n            fontExplosion[1] = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream(\"/GameObject/sprites/object/bomb_exploded1.png\")));\r\n            fontExplosion[2] = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream(\"/GameObject/sprites/object/bomb_exploded2.png\")));\r\n\r\n            upExplosion[0] = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream(\"/GameObject/sprites/object/explosion_vertical_top_last.png\")));\r\n            upExplosion[1] = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream(\"/GameObject/sprites/object/explosion_vertical_top_last1.png\")));\r\n            upExplosion[2] = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream(\"/GameObject/sprites/object/explosion_vertical_top_last2.png\")));\r\n\r\n            downExplosion[0] = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream(\"/GameObject/sprites/object/explosion_vertical_down_last.png\")));\r\n            downExplosion[1] = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream(\"/GameObject/sprites/object/explosion_vertical_down_last1.png\")));\r\n            downExplosion[2] = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream(\"/GameObject/sprites/object/explosion_vertical_down_last2.png\")));\r\n\r\n            leftExplosion[0] = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream(\"/GameObject/sprites/object/explosion_horizontal_left_last.png\")));\r\n            leftExplosion[1] = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream(\"/GameObject/sprites/object/explosion_horizontal_left_last1.png\")));\r\n            leftExplosion[2] = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream(\"/GameObject/sprites/object/explosion_horizontal_left_last2.png\")));\r\n\r\n            rightExplosion[0] = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream(\"/GameObject/sprites/object/explosion_horizontal_right_last.png\")));\r\n            rightExplosion[1] = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream(\"/GameObject/sprites/object/explosion_horizontal_right_last1.png\")));\r\n            rightExplosion[2] = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream(\"/GameObject/sprites/object/explosion_horizontal_right_last2.png\")));\r\n\r\n            horizontalExplosion[0] = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream(\"/GameObject/sprites/object/explosion_horizontal.png\")));\r\n            horizontalExplosion[1] = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream(\"/GameObject/sprites/object/explosion_horizontal1.png\")));\r\n            horizontalExplosion[2] = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream(\"/GameObject/sprites/object/explosion_horizontal2.png\")));\r\n\r\n            verticalExplosion[0] = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream(\"/GameObject/sprites/object/explosion_vertical.png\")));\r\n            verticalExplosion[1] = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream(\"/GameObject/sprites/object/explosion_vertical1.png\")));\r\n            verticalExplosion[2] = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream(\"/GameObject/sprites/object/explosion_vertical2.png\")));\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void Explosion(GamePanel gp) {\r\n        frameBomb++;\r\n        if (frameBomb == intervalBomb) {\r\n            frameBomb = 0;\r\n            indexAniBomb++;\r\n            if (indexAniBomb > 2) {\r\n                indexAniBomb = 0;\r\n                countToExplode++;\r\n            }\r\n            if (countToExplode >= intervalToExplode) {\r\n                exploded = true;\r\n            }\r\n        }\r\n        if (exploded) {\r\n            frameExplosion++;\r\n            if (frameExplosion == intervalExplosion) {\r\n                frameExplosion = 0;\r\n                indexAniExplosion++;\r\n            }\r\n            WallExploded(gp);\r\n            BrickExploded(gp);\r\n            EnemyExploded(gp);\r\n            FlameExploded(gp);\r\n            SpeedItemExploded(gp);\r\n        }\r\n    }\r\n\r\n    public void draw(Graphics2D g2, GamePanel gp, int x, int y) {\r\n        int bombX = this.x;\r\n        int bombY = this.y;\r\n        if (x < gp.screenWidth / 2) {\r\n            g2.drawImage(bombing[indexAniBomb], this.x, this.y, gp.tileSize, gp.tileSize, null);\r\n        } else if (this.x < gp.screenWidth / 2 && x > gp.screenWidth / 2) {\r\n            int bombScreenX = this.x - x + gp.screenWidth / 2;\r\n            bombX = bombScreenX;\r\n            g2.drawImage(bombing[indexAniBomb], bombScreenX, this.y, gp.tileSize, gp.tileSize, null);\r\n        } else if (this.x >= gp.screenWidth / 2 && this.x <= gp.worldWidth - gp.screenWidth / 2 && x >= gp.screenWidth / 2 && x <= gp.worldWidth - gp.screenWidth / 2) {\r\n            int bombScreenX = gp.screenWidth / 2 + this.x - x;\r\n            bombX = bombScreenX;\r\n            g2.drawImage(bombing[indexAniBomb], bombScreenX, this.y, gp.tileSize, gp.tileSize, null);\r\n        } else if (x > gp.worldWidth - gp.screenWidth / 2) {\r\n            int bombScreenX = this.x - gp.worldWidth + gp.screenWidth;\r\n            bombX = bombScreenX;\r\n            g2.drawImage(bombing[indexAniBomb], bombScreenX, this.y, gp.tileSize, gp.tileSize, null);\r\n        } else if (this.x > gp.worldWidth - gp.screenWidth / 2 && x <= gp.worldWidth - gp.screenWidth / 2) {\r\n            int bombScreenX = this.x - x + gp.screenWidth / 2;\r\n            bombX = bombScreenX;\r\n            g2.drawImage(bombing[indexAniBomb], bombScreenX, this.y, gp.tileSize, gp.tileSize, null);\r\n        }\r\n        if (this.exploded) {\r\n            for (int i = 1; i < UpFlame; i++) {\r\n                g2.drawImage(verticalExplosion[indexAniExplosion], bombX, bombY - gp.tileSize * i, gp.tileSize, gp.tileSize, null);\r\n            }\r\n            for (int i = 1; i < DownFlame; i++) {\r\n                g2.drawImage(verticalExplosion[indexAniExplosion], bombX, bombY + gp.tileSize * i, gp.tileSize, gp.tileSize, null);\r\n            }\r\n            for (int i = 1; i < LeftFlame; i++) {\r\n                g2.drawImage(horizontalExplosion[indexAniExplosion], bombX - gp.tileSize * i, bombY, gp.tileSize, gp.tileSize, null);\r\n            }\r\n            for (int i = 1; i < RightFlame; i++) {\r\n                g2.drawImage(horizontalExplosion[indexAniExplosion], bombX + gp.tileSize * i, bombY, gp.tileSize, gp.tileSize, null);\r\n            }\r\n            g2.drawImage(fontExplosion[indexAniExplosion], bombX, bombY, gp.tileSize, gp.tileSize, null);\r\n            if (UpFlame == FlameUp) {\r\n                g2.drawImage(upExplosion[indexAniExplosion], bombX, bombY - gp.tileSize * UpFlame, gp.tileSize, gp.tileSize, null);\r\n            }\r\n            if (DownFlame == FlameDown) {\r\n                g2.drawImage(downExplosion[indexAniExplosion], bombX, bombY + gp.tileSize * DownFlame, gp.tileSize, gp.tileSize, null);\r\n            }\r\n            if (LeftFlame == FlameLeft) {\r\n                g2.drawImage(leftExplosion[indexAniExplosion], bombX - gp.tileSize * LeftFlame, bombY, gp.tileSize, gp.tileSize, null);\r\n            }\r\n            if (RightFlame == FlameRight) {\r\n                g2.drawImage(rightExplosion[indexAniExplosion], bombX + gp.tileSize * RightFlame, bombY, gp.tileSize, gp.tileSize, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    public void WallExploded(GamePanel gp) {\r\n        System.out.println(LeftFlame);\r\n        int statusx = x / gp.tileSize;\r\n        int statusy = y / gp.tileSize;\r\n        for (int i = 1; i <= DownFlame; i++) {\r\n            if (TileManager.obj[statusy + i][statusx] instanceof Wall) {\r\n                if (DownFlame == 1) {\r\n                    DownFlame = i - 1;\r\n                } else  {\r\n                    DownFlame = i;\r\n                    FlameDown = -1;\r\n                }\r\n            }\r\n        }\r\n            for (int i = 1; i <= UpFlame; i++) {\r\n                if (TileManager.obj[statusy - i][statusx] instanceof Wall) {\r\n                    if (UpFlame == 1) {\r\n                        UpFlame = i - 1;\r\n                    } else  {\r\n                        UpFlame = i;\r\n                        FlameUp = -1;\r\n                    }\r\n                }\r\n            }\r\n            for (int i = 1; i <= RightFlame; i++) {\r\n                if (TileManager.obj[statusy][statusx + i] instanceof Wall) {\r\n                    if (RightFlame == 1) {\r\n                        RightFlame = i - 1;\r\n                    } else  {\r\n                        RightFlame = i;\r\n                        FlameRight = -1;\r\n                    }\r\n                }\r\n            }\r\n            for (int i = 1; i <= LeftFlame; i++) {\r\n                if (TileManager.obj[statusy][statusx - i] instanceof Wall) {\r\n                    if (LeftFlame == 1) {\r\n                        LeftFlame = i - 1;\r\n                    } else  {\r\n                        LeftFlame = i;\r\n                        FlameLeft = -1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    public void BrickExploded(GamePanel gp) {\r\n        int statusx = x / gp.tileSize;\r\n        int statusy = y / gp.tileSize;\r\n        for (int i = 1; i <= DownFlame; i++) {\r\n            if (TileManager.obj[statusy + i][statusx] instanceof Brick) {\r\n                TileManager.obj[statusy + i][statusx] = new Grass(statusx * gp.tileSize, (statusy + i) * gp.tileSize);\r\n                DownFlame = i;\r\n            }\r\n        }\r\n        for (int i = 1; i <= UpFlame; i++) {\r\n            if (TileManager.obj[statusy - i][statusx] instanceof Brick) {\r\n                TileManager.obj[statusy - i][statusx] = new Grass(statusx * gp.tileSize, (statusy - i) * gp.tileSize);\r\n                UpFlame = i;\r\n            }\r\n        }\r\n        for (int i = 1; i <= RightFlame; i++) {\r\n            if (TileManager.obj[statusy][statusx + i] instanceof Brick) {\r\n                TileManager.obj[statusy][statusx + i] = new Grass((statusx + i) * gp.tileSize, statusy * gp.tileSize);\r\n                RightFlame = i;\r\n            }\r\n        }\r\n        for (int i = 1; i <= LeftFlame; i++) {\r\n            if (TileManager.obj[statusy][statusx - i] instanceof Brick) {\r\n                TileManager.obj[statusy][statusx - i] = new Grass((statusx - i) * gp.tileSize, statusy * gp.tileSize);\r\n                LeftFlame = i;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void EnemyExploded(GamePanel gp) {\r\n        int statusx = x / gp.tileSize;\r\n        int statusy = y / gp.tileSize;\r\n        if (gp.enemy1 != null) {\r\n            if (TileManager.obj[statusy][statusx - 1].getBound().intersects(gp.enemy1.getBound(gp.enemy1.x, gp.enemy1.y))) {\r\n                gp.enemy1 = null;\r\n            } else if (TileManager.obj[statusy][statusx + 1].getBound().intersects(gp.enemy1.getBound(gp.enemy1.x, gp.enemy1.y))) {\r\n                gp.enemy1 = null;\r\n            } else if (TileManager.obj[statusy - 1][statusx].getBound().intersects(gp.enemy1.getBound(gp.enemy1.x, gp.enemy1.y))) {\r\n                gp.enemy1 = null;\r\n            } else if (TileManager.obj[statusy + 1][statusx - 1].getBound().intersects(gp.enemy1.getBound(gp.enemy1.x, gp.enemy1.y))) {\r\n                gp.enemy1 = null;\r\n            }\r\n        }\r\n        if (gp.enemy2 != null) {\r\n            if (TileManager.obj[statusy][statusx - 1].getBound().intersects(gp.enemy2.getBound(gp.enemy2.x, gp.enemy2.y))) {\r\n                gp.enemy2 = null;\r\n            } else if (TileManager.obj[statusy][statusx + 1].getBound().intersects(gp.enemy2.getBound(gp.enemy2.x, gp.enemy2.y))) {\r\n                gp.enemy2 = null;\r\n            } else if (TileManager.obj[statusy - 1][statusx].getBound().intersects(gp.enemy2.getBound(gp.enemy2.x, gp.enemy2.y))) {\r\n                gp.enemy2 = null;\r\n            } else if (TileManager.obj[statusy + 1][statusx - 1].getBound().intersects(gp.enemy2.getBound(gp.enemy2.x, gp.enemy2.y))) {\r\n                gp.enemy2 = null;\r\n            }\r\n        }\r\n        if (gp.enemy3 != null) {\r\n            if (TileManager.obj[statusy][statusx - 1].getBound().intersects(gp.enemy3.getBound(gp.enemy3.x, gp.enemy3.y))) {\r\n                gp.enemy3 = null;\r\n            } else if (TileManager.obj[statusy][statusx + 1].getBound().intersects(gp.enemy3.getBound(gp.enemy3.x, gp.enemy3.y))) {\r\n                gp.enemy3 = null;\r\n            } else if (TileManager.obj[statusy - 1][statusx].getBound().intersects(gp.enemy3.getBound(gp.enemy3.x, gp.enemy3.y))) {\r\n                gp.enemy3 = null;\r\n            } else if (TileManager.obj[statusy + 1][statusx - 1].getBound().intersects(gp.enemy3.getBound(gp.enemy3.x, gp.enemy3.y))) {\r\n                gp.enemy3 = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void FlameExploded(GamePanel gp) {\r\n        int statusx = x / gp.tileSize;\r\n        int statusy = y / gp.tileSize;\r\n        for (int i = 1; i <= DownFlame; i++) {\r\n            if (TileManager.obj[statusy + i][statusx] instanceof BrickFlameItem) {\r\n                TileManager.obj[statusy + i][statusx] = new FlameItem(statusx * gp.tileSize, (statusy + i) * gp.tileSize);\r\n                DownFlame = i;\r\n            }\r\n        }\r\n        for (int i = 1; i <= UpFlame; i++) {\r\n            if (TileManager.obj[statusy - i][statusx] instanceof BrickFlameItem) {\r\n                TileManager.obj[statusy - i][statusx] = new FlameItem(statusx * gp.tileSize, (statusy - i) * gp.tileSize);\r\n                UpFlame = i;\r\n            }\r\n        }\r\n        for (int i = 1; i <= RightFlame; i++) {\r\n            if (TileManager.obj[statusy][statusx + i] instanceof BrickFlameItem) {\r\n                TileManager.obj[statusy][statusx + i] = new FlameItem((statusx + i) * gp.tileSize, statusy * gp.tileSize);\r\n                RightFlame = i;\r\n            }\r\n        }\r\n        for (int i = 1; i <= LeftFlame; i++) {\r\n            if (TileManager.obj[statusy][statusx - i] instanceof BrickFlameItem) {\r\n                TileManager.obj[statusy][statusx - i] = new FlameItem((statusx - i) * gp.tileSize, statusy * gp.tileSize);\r\n                LeftFlame = i;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void SpeedItemExploded(GamePanel gp) {\r\n        int statusx = x / gp.tileSize;\r\n        int statusy = y / gp.tileSize;\r\n        for (int i = 1; i <= DownFlame; i++) {\r\n            if (TileManager.obj[statusy + i][statusx] instanceof BrickSpeedItem) {\r\n                TileManager.obj[statusy + i][statusx] = new SpeedItem(statusx * gp.tileSize, (statusy + i) * gp.tileSize);\r\n                DownFlame = i;\r\n            }\r\n        }\r\n        for (int i = 1; i <= UpFlame; i++) {\r\n            if (TileManager.obj[statusy - i][statusx] instanceof BrickSpeedItem) {\r\n                TileManager.obj[statusy - i][statusx] = new SpeedItem(statusx * gp.tileSize, (statusy - i) * gp.tileSize);\r\n                UpFlame = i;\r\n            }\r\n        }\r\n        for (int i = 1; i <= RightFlame; i++) {\r\n            if (TileManager.obj[statusy][statusx + i] instanceof BrickSpeedItem) {\r\n                TileManager.obj[statusy][statusx + i] = new SpeedItem((statusx + i) * gp.tileSize, statusy * gp.tileSize);\r\n                RightFlame = i;\r\n            }\r\n        }\r\n        for (int i = 1; i <= LeftFlame; i++) {\r\n            if (TileManager.obj[statusy][statusx - i] instanceof BrickSpeedItem) {\r\n                TileManager.obj[statusy][statusx - i] = new SpeedItem((statusx - i) * gp.tileSize, statusy * gp.tileSize);\r\n                LeftFlame = i;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/GameObject/object/Bomb.java b/src/GameObject/object/Bomb.java
--- a/src/GameObject/object/Bomb.java	(revision b80c6344eb4626b769c270beac5a5f94ba3574d8)
+++ b/src/GameObject/object/Bomb.java	(date 1666750133186)
@@ -253,41 +253,6 @@
     }
 
     public void EnemyExploded(GamePanel gp) {
-        int statusx = x / gp.tileSize;
-        int statusy = y / gp.tileSize;
-        if (gp.enemy1 != null) {
-            if (TileManager.obj[statusy][statusx - 1].getBound().intersects(gp.enemy1.getBound(gp.enemy1.x, gp.enemy1.y))) {
-                gp.enemy1 = null;
-            } else if (TileManager.obj[statusy][statusx + 1].getBound().intersects(gp.enemy1.getBound(gp.enemy1.x, gp.enemy1.y))) {
-                gp.enemy1 = null;
-            } else if (TileManager.obj[statusy - 1][statusx].getBound().intersects(gp.enemy1.getBound(gp.enemy1.x, gp.enemy1.y))) {
-                gp.enemy1 = null;
-            } else if (TileManager.obj[statusy + 1][statusx - 1].getBound().intersects(gp.enemy1.getBound(gp.enemy1.x, gp.enemy1.y))) {
-                gp.enemy1 = null;
-            }
-        }
-        if (gp.enemy2 != null) {
-            if (TileManager.obj[statusy][statusx - 1].getBound().intersects(gp.enemy2.getBound(gp.enemy2.x, gp.enemy2.y))) {
-                gp.enemy2 = null;
-            } else if (TileManager.obj[statusy][statusx + 1].getBound().intersects(gp.enemy2.getBound(gp.enemy2.x, gp.enemy2.y))) {
-                gp.enemy2 = null;
-            } else if (TileManager.obj[statusy - 1][statusx].getBound().intersects(gp.enemy2.getBound(gp.enemy2.x, gp.enemy2.y))) {
-                gp.enemy2 = null;
-            } else if (TileManager.obj[statusy + 1][statusx - 1].getBound().intersects(gp.enemy2.getBound(gp.enemy2.x, gp.enemy2.y))) {
-                gp.enemy2 = null;
-            }
-        }
-        if (gp.enemy3 != null) {
-            if (TileManager.obj[statusy][statusx - 1].getBound().intersects(gp.enemy3.getBound(gp.enemy3.x, gp.enemy3.y))) {
-                gp.enemy3 = null;
-            } else if (TileManager.obj[statusy][statusx + 1].getBound().intersects(gp.enemy3.getBound(gp.enemy3.x, gp.enemy3.y))) {
-                gp.enemy3 = null;
-            } else if (TileManager.obj[statusy - 1][statusx].getBound().intersects(gp.enemy3.getBound(gp.enemy3.x, gp.enemy3.y))) {
-                gp.enemy3 = null;
-            } else if (TileManager.obj[statusy + 1][statusx - 1].getBound().intersects(gp.enemy3.getBound(gp.enemy3.x, gp.enemy3.y))) {
-                gp.enemy3 = null;
-            }
-        }
     }
 
     public void FlameExploded(GamePanel gp) {
